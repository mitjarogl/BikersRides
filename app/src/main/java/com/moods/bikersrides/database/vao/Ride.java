package com.moods.bikersrides.database.vao;

import com.moods.bikersrides.database.dao.DaoSession;
import com.moods.bikersrides.database.dao.RideDao;
import com.moods.bikersrides.database.dao.RideImageDao;
import com.moods.bikersrides.database.dao.ViaDao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table RIDE.
 */
public class Ride {

    private Long id;
    private String startPoint;
    private String endPoint;
    private java.util.Date date;
    private Integer rating;
    private String comment;
    private Boolean isFavourite;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RideDao myDao;

    private List<RideImage> images;
    private List<Via> vias;

    public Ride() {
    }

    public Ride(Long id) {
        this.id = id;
    }

    public Ride(Long id, String startPoint, String endPoint, java.util.Date date, Integer rating, String comment, Boolean isFavourite) {
        this.id = id;
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.date = date;
        this.rating = rating;
        this.comment = comment;
        this.isFavourite = isFavourite;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRideDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getStartPoint() {
        return startPoint;
    }

    public void setStartPoint(String startPoint) {
        this.startPoint = startPoint;
    }

    public String getEndPoint() {
        return endPoint;
    }

    public void setEndPoint(String endPoint) {
        this.endPoint = endPoint;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Integer getRating() {
        return rating;
    }

    public void setRating(Integer rating) {
        this.rating = rating;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Boolean getIsFavourite() {
        return isFavourite;
    }

    public void setIsFavourite(Boolean isFavourite) {
        this.isFavourite = isFavourite;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RideImage> getImages() {
        if (images == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RideImageDao targetDao = daoSession.getRideImageDao();
            List<RideImage> imagesNew = targetDao._queryRide_Images(id);
            synchronized (this) {
                if(images == null) {
                    images = imagesNew;
                }
            }
        }
        return images;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImages() {
        images = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Via> getVias() {
        if (vias == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ViaDao targetDao = daoSession.getViaDao();
            List<Via> viasNew = targetDao._queryRide_Vias(id);
            synchronized (this) {
                if(vias == null) {
                    vias = viasNew;
                }
            }
        }
        return vias;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVias() {
        vias = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
