package com.moods.bikersrides.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moods.bikersrides.database.vao.Ride;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RIDE.
*/
public class RideDao extends AbstractDao<Ride, Long> {

    public static final String TABLENAME = "RIDE";

    /**
     * Properties of entity Ride.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartPoint = new Property(1, String.class, "startPoint", false, "START_POINT");
        public final static Property EndPoint = new Property(2, String.class, "endPoint", false, "END_POINT");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property Rating = new Property(4, Integer.class, "rating", false, "RATING");
        public final static Property Comment = new Property(5, String.class, "comment", false, "COMMENT");
        public final static Property IsFavourite = new Property(6, Boolean.class, "isFavourite", false, "IS_FAVOURITE");
    };

    private DaoSession daoSession;


    public RideDao(DaoConfig config) {
        super(config);
    }
    
    public RideDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RIDE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'START_POINT' TEXT," + // 1: startPoint
                "'END_POINT' TEXT," + // 2: endPoint
                "'DATE' INTEGER," + // 3: date
                "'RATING' INTEGER," + // 4: rating
                "'COMMENT' TEXT," + // 5: comment
                "'IS_FAVOURITE' INTEGER);"); // 6: isFavourite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RIDE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ride entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String startPoint = entity.getStartPoint();
        if (startPoint != null) {
            stmt.bindString(2, startPoint);
        }
 
        String endPoint = entity.getEndPoint();
        if (endPoint != null) {
            stmt.bindString(3, endPoint);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        Integer rating = entity.getRating();
        if (rating != null) {
            stmt.bindLong(5, rating);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(6, comment);
        }
 
        Boolean isFavourite = entity.getIsFavourite();
        if (isFavourite != null) {
            stmt.bindLong(7, isFavourite ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Ride entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ride readEntity(Cursor cursor, int offset) {
        Ride entity = new Ride( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // startPoint
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // endPoint
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rating
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comment
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isFavourite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ride entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartPoint(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEndPoint(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setRating(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setComment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsFavourite(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ride entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ride entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
